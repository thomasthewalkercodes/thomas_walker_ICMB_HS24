{
  "hash": "6a3348b2758529e2e30f73e6c6a129e7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Assignment 2.0\"\nauthor: \"Thomas Walker\"\n---\n\n\nThis is my try to replicate the simulation according to the assignment of replicating this simulation found [here](https://github.com/norvig/pytudes/blob/main/ipynb/Economics.ipynb#js-repo-pjax-container).\n\nSince the import random code didnt work out, Ill rewrite the code with the rnorm code, that should give us the same curve. Also creating a histogram for us to see.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN  <- 5000 # Population\nMU <- 100. # Mean of the Population\nstd_dev <- 15 # Standard deviation\n\npopulation <- rnorm(N, mean = MU, sd = std_dev)\n\nhist(population, breaks = 50, main = \"Random Gaussian Distribution\", xlab = \"Value\", col = \"skyblue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nNow we are computing the gini coefficient. (chatgpt assisted)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngini <- function(y) {\n  # Sort the population\n  y <- sort(y)\n  \n  # Number of elements\n  n <- length(y)\n  \n  # Calculate the Gini coefficient\n  numer <- 2 * sum((1:n) * y)\n  denom <- n * sum(y)\n  \n  # Return the Gini coefficient\n  return((numer / denom) - (n + 1) / n)\n}\n```\n:::\n\n\nNow, lets put my population into the gini coefficient.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngini(population)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0847681\n```\n\n\n:::\n:::\n\n\nHere is me running my simulation multiple times to see if this was a fluke:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation1 <- rnorm(N, mean = MU, sd = std_dev)\npopulation2 <- rnorm(N, mean = MU, sd = std_dev)\npopulation3 <- rnorm(N, mean = MU, sd = std_dev)\npopulation4 <- rnorm(N, mean = MU, sd = std_dev)\npopulation5 <- rnorm(N, mean = MU, sd = std_dev)\n\ngini(population1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.08331847\n```\n\n\n:::\n\n```{.r .cell-code}\ngini(population2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.08309262\n```\n\n\n:::\n\n```{.r .cell-code}\ngini(population3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.08386314\n```\n\n\n:::\n\n```{.r .cell-code}\ngini(population4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.08499821\n```\n\n\n:::\n\n```{.r .cell-code}\ngini(population5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.08513986\n```\n\n\n:::\n:::\n\n\nWe see that its always around 0.084. Which is a bit weird since in the simulation of the document Im reading puts the gini coeff at 0.11. Since the error is pretty consistent, I suspect an error in my code. I read through the parameters of the gaussian distribution and saw that the put a small formula into the std_dev part: MU/5. Which is std_dev = 20 but I used std_dev = 15.\n\nLets change that and see whats up\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN  <- 5000 # Population\nMU <- 100. # Mean of the Population\nstd_dev2 <- MU/5 # Standard deviation\n\npopulation <- rnorm(N, mean = MU, sd = std_dev2)\n\nhist(population, breaks = 50, main = \"Random Gaussian Distribution\", xlab = \"Value\", col = \"skyblue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThe histogram already looks a bit flatter, which should imply a higher gini coefficient as its more unequal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngini(population)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1117662\n```\n\n\n:::\n:::\n\n\nPerfect. Now lets test again if its a fluke.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation1 <- rnorm(N, mean = MU, sd = std_dev2)\npopulation2 <- rnorm(N, mean = MU, sd = std_dev2)\npopulation3 <- rnorm(N, mean = MU, sd = std_dev2)\npopulation4 <- rnorm(N, mean = MU, sd = std_dev2)\npopulation5 <- rnorm(N, mean = MU, sd = std_dev2)\n\ngini(population1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1118576\n```\n\n\n:::\n\n```{.r .cell-code}\ngini(population2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1132838\n```\n\n\n:::\n\n```{.r .cell-code}\ngini(population3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1122562\n```\n\n\n:::\n\n```{.r .cell-code}\ngini(population4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1120957\n```\n\n\n:::\n\n```{.r .cell-code}\ngini(population5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1121591\n```\n\n\n:::\n:::\n\n\nNow in the end, Ill do the histogram prettier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(population, breaks = 50, main = \"Random Gaussian Distribution\", xlab = \"wealth\", ylab = \"count\", col = \"skyblue\")\ngini_text <- round(gini(population),4)\ntext(x = 150, y = 400, labels = paste(gini_text), col = \"skyblue\", cex = 1.5)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nThis suffices.\n\nNow Ill write the function of the money splitting. To be honest, I have never written a function myself but I can use the gini function as a blueprint.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_split <- function(x,y) {\n  # Sum them up\n  pot <- x+y\n  #how to share\n  part1 <- runif(1, min=0, max=pot)\n  #calcutlating the  split \n  part2 <- pot - part1\n  # Return the Gini coefficient\n  return(c(part1, part2))\n}\n```\n:::\n\n\nLets run this bad boy\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_split(30,70)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 67.14333 32.85667\n```\n\n\n:::\n:::\n\n\nOkay so I dont like how it splits the money into so many small parts. This doesnt make sense as we in real life dont do that either. If we want bigger numbers, Ill just up the amount of money people trade with. Else why did we put the number on 100 if we are taking in numbers in the millions??? Exactly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrandom_split <- function(x,y) {\n  # Sum them up\n  pot <- x+y\n  \n  #how to share\n  part1 <- sample(0:pot, 1)\n  \n  #calcutlating the  split \n  part2 <- pot - part1\n  \n  # Return the Gini coefficient\n  return(c(part1, part2))\n}\nrandom_split(70,30)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15 85\n```\n\n\n:::\n:::\n\n\nbetter.\n\nNow, like in the guide, lets see if we can pick two random citiziens of our population.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanyone <- function(x){\n  sample(0:N, 2)\n}\n\nanyone(N) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  661 3002\n```\n\n\n:::\n:::\n\n\nNow lets officially start with simulating whueee :)))\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"simulate <- function(N, repetitions){\n  history <- list()\n  #so that the first entry is the population we started with\n  history[[1]] <- N\n  \n  for (t in 1:repetitions){\n    selected_people <- anyone(N)\n    #getting the people for trading\n    person1 <- selected_people[1]\n    person2 <- selected_people[2]\n    #getting them the amount what they traded\n    new_wealth <- random_split(person1, person2)\n    #Updating their money\n    N[N == person1] <- new_wealth[1]\n    N[N == person2] <- new_wealth[2]\n    #Record the current state of the population\n    history[[t+1]] <- population\n  }\n  \n  return(history)\n}\n\nrepetitions <-1\n\nsimulate(population, repetitions)\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"simulate <- function(N, repetitions){\\n  history <- list()\\n  #so that the first entry is the population we started with\\n  history[[1]] <- N\\n  \\n  for (t in 1:repetitions){\\n    selected_people <- anyone(N)\\n    #getting the people for trading\\n    person1 <- selected_people[1]\\n    person2 <- selected_people[2]\\n    #getting them the amount what they traded\\n    new_wealth <- random_split(person1, person2)\\n    #Updating their money\\n    N[N == person1] <- new_wealth[1]\\n    N[N == person2] <- new_wealth[2]\\n    #Record the current state of the population\\n    history[[t+1]] <- population\\n  }\\n  \\n  return(history)\\n}\\n\\nrepetitions <-1\\n\\nsimulate(population, repetitions)\"\n```\n\n\n:::\n:::\n\n\nThis next code block is to test some small parts of the code above and see where the problem is.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_people <- anyone(round_population)\n    #getting the people for trading\n    person1 <- selected_people[1]\n    person2 <- selected_people[2]\n    \nperson1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3337\n```\n\n\n:::\n\n```{.r .cell-code}\nperson2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 307\n```\n\n\n:::\n\n```{.r .cell-code}\nrandom_split(person1, person2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1790 1854\n```\n\n\n:::\n:::\n\n\nI have run into several problems and started solving them in the editor. I think its better if I describe some procesess I have been doing though. So I still get decimals in the gaussian distribution, which I dont want. So Ill change that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround_population <- round(population)\n\nhist(round_population, breaks = 50, main = \"Random Gaussian Distribution\", xlab = \"Value\", col = \"skyblue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nAgain, some shenanigangs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperson1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3337\n```\n\n\n:::\n\n```{.r .cell-code}\nperson2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 307\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nselected_people <- anyone(round_population)\n#getting the people for trading\nperson1 <- selected_people[1]\nperson2 <- selected_people[2]\nperson1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3529\n```\n\n\n:::\n\n```{.r .cell-code}\nperson2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 598\n```\n\n\n:::\n\n```{.r .cell-code}\n    #getting them the amount what they traded\nnew_wealth <- random_split(person1, person2)\n    #Updating their money\nround_population[round_population == person1] <- new_wealth[1]\nround_population[round_population == person2] <- new_wealth[2]\nperson1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3529\n```\n\n\n:::\n\n```{.r .cell-code}\nperson2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 598\n```\n\n\n:::\n\n```{.r .cell-code}\n    #Record the current state of the population\n    #history[[t+1]] <- round_population\n  #}\n  \n\n\n#simulate(round_population, repetitions)\n```\n:::\n\n\nall in one thing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nN  <- 5000 # Population.\nMU <- 100 # Mean of the Population\nstd_dev <- MU/5 # Standard deviation\n\npopulation <- rnorm(N, mean = MU, sd = std_dev)\nround_population <- round(population)\n\n\nanyone <- function(round_population){\n  sample(1:length(round_population), 2)\n}\n\nrandom_split <- function(x,y) {\n  # Sum them up\n  pot <- x+y\n  #how to share\n  part1 <- sample(0:pot, 1)\n  #calcutlating the  split \n  part2 <- pot - part1\n  # Return the Gini coefficient\n  return(c(part1, part2))\n}\n\nsimulation <- function(round_population,repetitions) {\n  for (i in 1:repetitions) {\n      selected_people <- anyone(round_population)\n      #getting the people for trading\n      person1 <- round_population[selected_people[1]]\n      person2 <- round_population[selected_people[2]]\n      #making the new wealth distribution between those two\n      new_wealth <- random_split(person1, person2)\n      #overwriting the old bank statement with the new one\n      round_population[selected_people[1]] <- new_wealth[1]\n      round_population[selected_people[2]] <- new_wealth[2]\n      \n  }\n  return(round_population)\n}\n\nrepetitions <- 10000\n\nfinal_population <- simulation(round_population, repetitions)\n\nhist(final_population, breaks = 50, main = \"After Simulation Grapn\", xlab = \"Value\", col = \"skyblue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nThis IS CORRECT I WANT TO SCREAM OH MY GOD I CHANGED SO MUCH AND NOW I GET IT YAAAs.\n\nI also noticed that only starting at like 10'000 simulations we get this distribution, before that we dont. (Maybe Ill implement this in this website we will see)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}